#!/bin/bash
help() {
	echo 'kdsy-stat [OPTIONS]'
}

while getopts 'f:l:r:p:m:vh' opt ;do
	case $opt in
		f) db=$OPTARG ;;
		l) l=$OPTARG ;;
		r) r=$OPTARG ;;
		p) p=$OPTARG ;;
		m) m=$OPTARG ;;
		v) v=true ;;
		h) help ;;
		?) help ;;
	esac
done
shift $((OPTIND-1))

if [[ -z $db ]] ;then
	db=$KDSY/kdsy.db
fi
if [[ ! -f $db ]] ;then
	echo -e '\e[31m数据库不存在，请先运行 kdsy-gather 初始化数据库并收集信息\e[0m'
	exit
fi

# Right limit
if [[ -z $r ]] ;then
	r=$((`date +%s`+1800))	# UNIX timestamp now
	(( r = r - ( r % 1800 ) ))
fi
# Left limit
if [[ -z $l ]] ;then
	l=$((r-86400))			# 24 hours before now
fi
# Period
if [[ -z $p ]] ;then
	p=1800					# Half an hour
fi
# Multiply length
if [[ -z $m ]] ;then
	m=2
fi

# debug
if [[ ! -z $v ]] ;then
	echo '当前时间: '`date -Is -d@$l`'  '`date -Is -d@$r`
	echo '区间长度: '$p' 秒, 直方图长度倍率: '$m
fi

cur=$l
cnt=0
pbar() {
	lstr=`date -Im -d@$((cur-p)) |sed -e's/\+.*//' -e's/.*T//'`
	rstr=`date -Im -d@$cur |sed -e's/\+.*//' -e's/.*T//'`
	hr=`echo $lstr |sed -e's/:.*//' -e's/^0//'`
	if ((hr<7)) ;then
		return
	fi
	echo -e -n '\e[34m'$lstr' - '$rstr': \e[0m'
	if (($cnt < 10)) ;then
		color='\e[32m'							# 1-9	Green
	elif (($cnt >= 10)) && (($cnt < 20)) ;then
		color='\e[33m'							# 10-19	Yellow
	else
		color='\e[31m'							# 20+	Red
	fi
	echo -n -e $color

	for j in `seq 1 $((cnt*m))` ;do
		echo -n '▇'
	done

	echo -e '\e[0m '$cnt						# End
}

cur=$l
for i in `seq 1 $(( (r - l) / p ))` ;do
	cur=$((cur+p))
	cnt=`sqlite3 $db 'SELECT COUNT(1) FROM LOGIN WHERE ACCESS > '$((cur-p))' AND ACCESS < '$cur`
	if [[ ! -z $v ]] ;then
		sqlite3 $db -box 'SELECT * FROM LOGIN WHERE ACCESS > '$((cur-p))' AND ACCESS < '$cur' ORDER BY ACCESS'
	fi
	pbar
done
if [[ ! -z $v ]] ;then
	echo -n '区间内总登录数: '
	sqlite3 $db 'SELECT COUNT(1) FROM LOGIN WHERE ACCESS > '$l' AND ACCESS < '$r
	echo '数据库每半小时自动更新一次，最近半小时信息缺失属于正常情况，可手动更新'
fi
